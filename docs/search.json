[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analyzing Player Load and Explosive Movements in UVA Mens Basketball",
    "section": "",
    "text": "Report",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "Analyzing Player Load and Explosive Movements in UVA Mens Basketball",
    "section": "Prepared for",
    "text": "Prepared for\nUVA Men’s Basketball Team Members and Coaching Staff.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "Analyzing Player Load and Explosive Movements in UVA Mens Basketball",
    "section": "Problem Statement",
    "text": "Problem Statement\nOver the past decade, the UVA Men’s Basketball Team has produced elite forwards, including current NBA players De’Andre Hunter and Trey Murphy. These players played pivotal roles in several successful seasons, including multiple NCAA Tournament appearances and a National Championship victory in 2019. Over the years, UVA forwards have stood out for their versatility, athleticism, and explosive ability, often acting as the most dynamic players on the court.\nHowever, since the 2022–23 season, the team has seen a noticeable decline in performance, struggling to maintain the same level of national competitiveness. To begin exploring this shift, we looked at Catapult S7 wearable data from the 2022–23 and 2023–24 seasons. We focused on three key metrics that reflect physical intensity and explosiveness: PlayerLoad Per Minute, high-intensity accelerations, and high-band jump counts. Given UVA’s history of dominant forwards, we expected them to lead in these areas. The bar chart below shows how these metrics compare across positions.\n\nSurprisingly, forwards do not lead in any of the three categories. This result led us to narrow our focus specifically to forwards to better understand their physical output, and what factors might be influencing it. Could current forwards be underperforming because their training does not match game-level intensity?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "Analyzing Player Load and Explosive Movements in UVA Mens Basketball",
    "section": "Analysis",
    "text": "Analysis\nAfter narrowing our focus to forwards, we examined how their physical output differs between games and practices. Using Catapult S7 data, we compared three key metrics: PlayerLoad Per Minute, IMA Accel High, and IMA Jump Count High Band, across both contexts. These metrics reflect different types of high-effort movement and overall physical intensity.\nThe graph below shows a consistent pattern: for all three metrics, values are substantially higher in games than in practices. In particular, PlayerLoad Per Minute during games is about twice as high as it is during practices. This difference holds across all metrics, suggesting that forwards are exerting themselves far more during competition than they are during training. The error bars show that this trend remains consistent even when accounting for variability in the data.\n\nThis analysis indicates that the intensity of current practices may not be preparing forwards for the level of physical output required during games. This mismatch may be contributing to the team’s overall underperformance on the court, especially in a program where explosiveness has been a defining strength of many successful forwards.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Analyzing Player Load and Explosive Movements in UVA Mens Basketball",
    "section": "Conclusion",
    "text": "Conclusion\nThese findings highlight a potential area of opportunity for the UVA Men’s Basketball program. Practices are not currently matching the intensity of games for forwards, a position that has historically been central to the team’s success. This mismatch in physical demands may be limiting development and in-game performance.\nWhile the goal is not necessarily to make practices harder, they could be made more reflective of game conditions. Emphasizing full-speed, high-effort scenarios, such as full-count 5v5 scrimmages or short bursts of explosive movement, may help players better prepare for competition. Monitoring physical output in real time could also help tailor training to individual needs.\nBridging the gap between practice and game intensity could be a key step toward regaining the edge that once defined UVA’s most successful seasons.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "# Imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nInitial Exploration, Variable Selection\n\ns1_df = pd.read_csv(\"../project/EDA/Data/catapult_s1.csv\")\ns1_df = pd.DataFrame(s1_df)\n\ns2_df = pd.read_csv(\"../project/EDA/Data/catapult_s2.csv\")\ns2_df = pd.DataFrame(s2_df)\n\nOur first step in preparing our data was reading it in. We read in the two dataframes for the individual UVA basketball seasons(2022-23 and 2023-24). Note: This data is simulated\n\ns1_df['Season'] = 'Season 1'\ns2_df['Season'] = 'Season 2'\ndf = pd.concat([s1_df, s2_df], ignore_index=True)\n\nWe then combined both seasons, centralizing our data into one single dataframe.\n\ndf = df[['Date', 'Season', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']]\n\nOnce we had all of our data read into one dataframe, we filtered it down to include only our variables of interest (as shown above). We wanted to explore exertion in both practice in games, with a focus on positional differences. We felt that PlayerLoad, IMA Accel High, IMA Jump Count High Band, and Session Total Jumps would provide the most insight on this topic. We also kept identifying variables such as date, season, period, etc.\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"viridis\")\nplt.title(\"Missing Data Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\nWe used a heatmap to visualize the number of missing values in our dataframe, which can be seen in yellow. This indicates that our Session Total Jumps variable(referring to the total number of jumps each player has in all periods at each date) is missing a lot of values. We will not use Session Total Jumps in our report as a key variable considering the prevalence of missing values.\n\n# Check data types\nprint(df.dtypes)\n\nDate                         object\nSeason                       object\nAbout                        object\nPosition                     object\nPeriod Number                 int64\nPeriod                       object\nTotal Player Load           float64\nPlayer Load Per Minute      float64\nIMA Accel High                int64\nIMA Jump Count High Band      int64\nSession Total Jumps         float64\ndtype: object\n\n\nWe proceeded to check our data types to see if we would need to convert any variables to a different type(such as an object to an int/float). We concluded that we did not need to do so.\n\n# Convert Date to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\nWe converted our ‘Date’ variable to datetime format for future the exploration of change across time in our report.\n\n\nRemoving Observations\n\ndf.shape\n\n(29442, 11)\n\n\nLooking at the shape of our dataframe, we currently have 29,442 observations of 11 variables\n\n# Remove duplicates\ndf = df.drop_duplicates()\n\n\ndf.shape\n\n(29401, 11)\n\n\nAfter dropping our duplicate variables, we are left with 29,401 observations, indicating a low prevalence of duplicates.\n\n# Removing Vander Plas rows\ndf = df[df['About'] != 'Ben Vander Plas']\n\nWe removed all observations where Ben Vander Plas was the athlete. We did this because this data is supposed to be anonymous and we did not want to reveal any personal information about players.\n\n# Splitting up so we can look at positional differences\nforward_df = df[df['Position'] == 'Forward']\nguard_df = df[df['Position'] == 'Guard']\ncenter_df = df[df['Position'] == 'Center']\n\nWe created additional dataframes for each position. We did so because we wanted to analyze differences across position, specifically against forwards. This allowed us to easily access positional differences when looking at statistics and creating visualizations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "# Data preperation lines, not outputted on final report\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ns1_df = pd.read_csv(\"../project/EDA/Data/catapult_s1.csv\")\ns1_df = pd.DataFrame(s1_df)\n\ns2_df = pd.read_csv(\"../project/EDA/Data/catapult_s2.csv\")\ns2_df = pd.DataFrame(s2_df)\n\ns1_df['Season'] = 'Season 1'\ns2_df['Season'] = 'Season 2'\ndf = pd.concat([s1_df, s2_df], ignore_index=True)\n\ndf = df[['Date', 'Season', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']]\n\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf = df.drop_duplicates()\n\ndf = df[df['About'] != 'Ben Vander Plas']\n\nforward_df = df[df['Position'] == 'Forward']\nguard_df = df[df['Position'] == 'Guard']\ncenter_df = df[df['Position'] == 'Center']\n\nmask = df['Period'].str.contains(r'\\bperiod\\b\\s*\\d*', case=False, na=False)\ngames_df = df[mask]\npractice_df = df[~mask]\n\n\nDescriptive Statistics & Distributions\n\n# Pulling out key numeric variables\nvars_list = ['Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']\n\n\nforward_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n10511.000000\n10511.000000\n10511.000000\n10511.000000\n10511.000000\n1155.000000\n\n\nmean\n6.388165\n56.569851\n5.621986\n1.359052\n2.606603\n128.711688\n\n\nstd\n4.006159\n61.007945\n2.510067\n2.473628\n4.734194\n62.874355\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n3.000000\n19.947000\n4.100000\n0.000000\n0.000000\n86.000000\n\n\n50%\n6.000000\n35.826000\n5.300000\n1.000000\n1.000000\n119.000000\n\n\n75%\n9.000000\n65.581500\n6.700000\n2.000000\n3.000000\n164.000000\n\n\nmax\n18.000000\n534.156000\n19.700000\n30.000000\n61.000000\n384.000000\n\n\n\n\n\n\n\n\ncenter_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n3246.000000\n3246.000000\n3246.000000\n3246.000000\n3246.00000\n352.000000\n\n\nmean\n6.298521\n55.603756\n5.692791\n2.018484\n3.03358\n103.482955\n\n\nstd\n3.894753\n56.398404\n2.686004\n3.118062\n6.32298\n47.270691\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.00000\n0.000000\n\n\n25%\n3.000000\n20.394500\n4.000000\n0.000000\n0.00000\n71.000000\n\n\n50%\n6.000000\n37.671000\n5.300000\n1.000000\n1.00000\n96.500000\n\n\n75%\n9.000000\n70.662750\n7.000000\n3.000000\n3.00000\n128.250000\n\n\nmax\n18.000000\n532.129000\n18.700000\n42.000000\n82.00000\n296.000000\n\n\n\n\n\n\n\n\nguard_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n14428.000000\n14428.000000\n14428.000000\n14428.000000\n14428.000000\n1597.000000\n\n\nmean\n6.317854\n56.713305\n5.435438\n1.147283\n2.173759\n121.018785\n\n\nstd\n3.970732\n63.981904\n2.408013\n2.189694\n4.690042\n57.837034\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n3.000000\n19.082000\n3.900000\n0.000000\n0.000000\n85.000000\n\n\n50%\n6.000000\n35.199500\n5.200000\n0.000000\n1.000000\n112.000000\n\n\n75%\n9.000000\n65.655500\n6.600000\n1.000000\n2.000000\n150.000000\n\n\nmax\n18.000000\n531.556000\n17.300000\n55.000000\n96.000000\n402.000000\n\n\n\n\n\n\n\nMean total player load is highest for forwards, but they also have more variance. It seems that centers have more high band jumps and high accelerations than forwards, indicating that they may not be exerting much effort. We will proceed by exploring our forwards dataframe.\n\nsns.lineplot(data=forward_df, x='Period Number', y='Player Load Per Minute', hue='About', legend=False, alpha=0.5)\nsns.despine()\nplt.title(\"PlayerLoad by Period\")\nplt.xticks(ticks=[3, 6, 9, 12, 15, 18], labels=['3', '6', '9', '12', '15','18'])\nplt.show()\n\n\n\n\n\n\n\n\nWe can see that PlayerLoad does change by period, peaking with periods around 2. From our dataframe it appears these are the game periods, indicating higher effort exerted during games than practices by forwards. This should be noted as we progress throughout our project.\n\nfig, axes = plt.subplots(len(vars_list), 1, figsize=(4, 2*len(vars_list)))\n\nfor i, column in enumerate(vars_list):\n    sns.kdeplot(forward_df[column], ax=axes[i], color='orange')\n    axes[i].set_title(f'Density Plot of {column}')\n    axes[i].spines['top'].set_visible(False)\n    axes[i].spines['right'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSession total jumps appears to be roughly normally distributed here, as well as player load per minute. Our other variables are skewed to the right, indicating we have high outliers. We can look at boxplots of our skewed variables to explore this further.\n\nsns.boxplot(forward_df['Total Player Load'])\nplt.title('Boxplot of Total Player Load')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(forward_df['IMA Accel High'])\nplt.title('Boxplot of IMA Accel High')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(forward_df['IMA Jump Count High Band'])\nplt.title('Boxplot of IMA Jump Count High Band')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\nThere are clearly many high outliers in our data set\n\n#games_df = df[df['Period'].isin(['2. Period 1', '3. Period 2', '1. Warmup'])]\n#practice_df = df[~df['Period'].isin(['2. Period 1', '3. Period 2', '1. Warmup'])]\n\n# need to ask questions about how the data is formatted. we want to split it up into practice and games but there are so many unique \n# identifiers for period that we are unsure how to best go about this.\n\n\n\nExploring relationships between our variables\n\n# Pairplots showing correlation between our key variables\nkey_vars_df = forward_df[vars_list]\nsns.pairplot(key_vars_df, plot_kws={'color': 'orange'})\nplt.show()\n\n\n\n\n\n\n\n\nFrom the pair plots it can be seen that there is a moderate correlation between Total Player Load and IMA Accel High. Other than that there are no relationships that seem to show great correlation between our variables. Collinearity does not appear to be of concern but we can look at a heatmap of our most important variables to explore more precise values.\n\nselected_cols = ['Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band']\nkey_corr = forward_df[selected_cols].corr()\n\nsns.heatmap(key_corr, annot=True, cmap='coolwarm')\nplt.title(\"Correlation Between Acceleration Metrics\")\nplt.xticks([0, 1, 2], ['PL/min', 'Accel High', 'High band Jump'], rotation=0)\nplt.yticks([0, 1, 2], ['PL/min', 'Accel High', 'High band Jump'], rotation=0)\nplt.show()\n\n\n\n\n\n\n\n\nNone of the correlations between our selected variables are very high so we do not need to look into causal relationships.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "Dataviz",
    "section": "",
    "text": "# Imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data prep\ns1_df = pd.read_csv(\"../project/EDA/Data/catapult_s1.csv\")\ns1_df = pd.DataFrame(s1_df)\n\ns2_df = pd.read_csv(\"../project/EDA/Data/catapult_s2.csv\")\ns2_df = pd.DataFrame(s2_df)\ns1_df['Season'] = 'Season 1'\ns2_df['Season'] = 'Season 2'\ndf = pd.concat([s1_df, s2_df], ignore_index=True)\ndf = df[df['About'] != 'Ben Vander Plas']\ndf = df[['Date', 'Season', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', \n         'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']]\ndf = df.drop_duplicates()\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.sort_values(['About', 'Date'])\nforward_df = df[df['Position'] == 'Forward']\nguard_df = df[df['Position'] == 'Guard']\ncenter_df = df[df['Position'] == 'Center']\n\n# Splitting into game and practice df\nfilter = df['Period'].str.contains(r'\\bperiod\\b\\s*\\d*', case=False, na=False)\ngames_df = df[filter]\npractice_df = df[~filter]\n\n\nGraph 1 Code\n\n# Setting font\nplt.rcParams['font.family'] = 'Avenir Next'\n\n# Creating fig and axs, adding title, and subtext\nfig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nplt.suptitle('Explosive Movement Metrics for Forwards fall Between Centers, Guards', fontsize=24, weight='bold', color='#3a3a3a')\nplt.figtext(0.5, 0.85, '2022/23 and 2023/24 Regular Season Data', \n           ha='center', fontsize=14, style='italic', color='#555555')\n\n# Define metrics and names\nmetrics = ['PlayerLoad Per Minute', 'IMA Accel High(accel&gt;3m/s/s)', 'IMA Jump Count High Band (jumps&gt;40cm)']\nmetric_keys = ['Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band'] \n\n# Setting color to be orange for forwards, gray for all else\nposition_colors = {'Guard': '#d3d3d3', 'Forward': '#fe5a03', 'Center': '#d3d3d3'}\n\n# Finding mean for position\nsummary_df = pd.DataFrame({\n    'Position': ['Guard', 'Forward', 'Center'],\n    'Player Load Per Minute': [guard_df['Player Load Per Minute'].mean(),\n                                forward_df['Player Load Per Minute'].mean(), center_df['Player Load Per Minute'].mean()],\n    'IMA Accel High': [guard_df['IMA Accel High'].mean(), \n                       forward_df['IMA Accel High'].mean(), center_df['IMA Accel High'].mean()],\n    'IMA Jump Count High Band': [guard_df['IMA Jump Count High Band'].mean(), \n                                 forward_df['IMA Jump Count High Band'].mean(), center_df['IMA Jump Count High Band'].mean()]})\n\n# Calculating standard deviation for position to indicate error\nerror_df = pd.DataFrame({\n    'Position': ['Guard', 'Forward', 'Center'],\n    'Player Load Per Minute': [guard_df['Player Load Per Minute'].std(),\n                                forward_df['Player Load Per Minute'].std(), \n                                center_df['Player Load Per Minute'].std()],\n    'IMA Accel High': [guard_df['IMA Accel High'].std(), \n                       forward_df['IMA Accel High'].std(), \n                       center_df['IMA Accel High'].std()],\n    'IMA Jump Count High Band': [guard_df['IMA Jump Count High Band'].std(), \n                                 forward_df['IMA Jump Count High Band'].std(), \n                                 center_df['IMA Jump Count High Band'].std()]})\n\n# Looping over both the metric title and key\nfor i, (metric_title, metric_key) in enumerate(zip(metrics, metric_keys)):\n    # Extracting position from summary dataframe\n    positions = summary_df['Position']\n    # Extracting mean for given metric\n    values = summary_df[metric_key]\n    # Plotting color for position(orange for forwards, gray otherwise)\n    colors = [position_colors[pos] for pos in positions]\n    # Extracting error\n    errors = error_df[metric_key].values\n    # Plotting the bar at the given axis\n    ax = axs[i]\n    bars = ax.barh(positions, values, color=colors, zorder=2)\n    \n    # Get errors for current metric\n    current_errors = error_df[metric_key].values\n\n    # Adding value labels to each bar, error as well\n    for bar, value, error in zip(bars, values, current_errors):\n        # Round both value and error to one decimal place\n        formatted_value = f'{value:.1f} ± {error:.1f}'\n        # Offset from end of bar\n        ax.text(bar.get_width() + (ax.get_xlim()[1] * 0.02), \n                bar.get_y() + bar.get_height()/2, \n                formatted_value,\n                va='center', \n                size=14, \n                fontweight='bold', \n                color='#3a3a3a')\n\n       \n    # Setting title as specified metric\n    ax.set_title(metric_title, loc='left', fontsize=16, weight='bold', color='#3a3a3a')\n    # Creating grid\n    ax.grid(axis='x', linestyle=':', color='gray', zorder=0)\n    # Removing spines\n    ax.spines[['top', 'right', 'bottom']].set_visible(False)\n    # Removing x-tick labels because we show values\n    ax.tick_params(axis='x', length=0, labelsize=0)\n    ax.tick_params(axis='y', length=0, labelsize=12, labelcolor='#111', width=0)\n    ax.locator_params(axis='x', nbins=4)\n    \n    # Add a bit more space to the right of each plot to accommodate the value labels\n    x_max = max(values) * 1.15\n    ax.set_xlim(0, x_max)\n\n\n# Adding text at the bottom to indicate the units used\nplt.figtext(0.5, 0.01, 'Units: PlayerLoad = arbitrary units (a.u.); Acceleration = counts over 3 m/s²; Jump Count High Band = jumps over 40 cm',\n            ha='center', fontsize=13, style='italic', color='#555555')\n\nplt.tight_layout()\n# Adding room for title at the top, bottom for text\nplt.subplots_adjust(top=0.725, bottom=0.1)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nGraph 2 Code\n\n# Add session type column\nforward_df['Session Type'] = np.where(\n    forward_df['Period'].str.contains(r'\\bperiod\\b\\s*\\d*', case=False, na=False),\n    'Game',\n    'Practice'\n)\n\n# Group player and session type\nplayer_means = forward_df.groupby(['About', 'Session Type'])['Player Load Per Minute'].mean().unstack()\n\n# Sort players by Game values\nplayer_means = player_means.sort_values(by='Game', ascending=False)\n\n# Plot\nplt.figure(figsize=(10, 6))\nfor i, (player, row) in enumerate(player_means.iterrows()):\n    # Plot the line between practice and game values\n    plt.plot([row['Practice'], row['Game']], [i, i], color='gray', linewidth=1.5, zorder=1)\n    # Plot the practice value\n    plt.scatter(row['Practice'], i, color='#fe5a03', label='Practice' if i == 0 else \"\", zorder=2)\n    # Add data labels for practice values for each player\n    plt.text(row['Practice'], i + 0.2, f\"{row['Practice']:.1f}\", color='#fe5a03', ha='center', fontsize=8)\n    # Plot the game value\n    plt.scatter(row['Game'], i, color='#2077bd', label='Game' if i == 0 else \"\", zorder=2)\n    # Add data labels for game values for each player\n    plt.text(row['Game'], i + 0.2, f\"{row['Game']:.1f}\", color='#2077bd', ha='center', fontsize=8)\n\n# Change yticks to player names\nplt.yticks(range(len(player_means.index)), player_means.index, fontsize=9)\n# Change x-axis limits and tick frequency for more clarity\nplt.xticks(range(5,15, 1))\n# Add a title, legend, remove spines, add a x-axis grid, and show the plot\nplt.suptitle(\"Player Load/Min for Forwards in Games Far Outpaces Practice Performance\", fontsize=18)\nplt.legend()\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.grid(True, axis='x', linestyle=':', color='gray', alpha=0.6)\nplt.tight_layout()\nplt.show()\n\n/var/folders/n6/pgk9bwwd15g8ch5_lb0_0gvm0000gn/T/ipykernel_14458/1289544084.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n\n\n\n\n\nGraph 3 Code\n\nplt.rcParams['font.family'] = 'Avenir Next'\n\n# Separate games and practice sessions\ngames_df = df[filter].copy()\npractice_df = df[~filter].copy()\ngames_df['Session Type'] = 'Game'\npractice_df['Session Type'] = 'Practice'\n\n# Name our metrics as vars in a list\nvars = ['Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band']\n\n# Combine games and practice df \ndf = pd.concat([games_df, practice_df], ignore_index=True)\ndf = df[df['Position'] == 'Forward']\nerror_df = df.groupby(['Season', 'Session Type'])[vars].std().reset_index() \n\n# Set parameters for plotting\ngrouped_df = df.groupby(['Season', 'Session Type'])[vars].mean().reset_index()\n\n# Set up the fig and axs, colors, and season names\nfig, axs = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nbar_width = 0.35\nx = range(len(vars))\ncolors = {'Game': '#2077bd', 'Practice': '#fe5a03'}\nseasons = ['Season 1', 'Season 2']\n\n# Loop through each season subplot\nfor i, season in enumerate(seasons):\n    ax = axs[i]\n    season_data = grouped_df[grouped_df['Season'] == season]\n\n    # Loop through each session type to plot the bars\n    for j, session in enumerate(['Game', 'Practice']):\n        values = season_data[season_data['Session Type'] == session][vars].values.flatten()\n        errors = error_df[(error_df['Season'] == season) & (error_df['Session Type'] == session)][vars].values.flatten() # Calculate errors\n        clipped_errors = np.minimum(errors, values) # Make sure errors are not below 0\n        positions = [p + (j - 0.5) * bar_width for p in x] # Adjust positions for each session type\n        ax.bar(positions, values, width=bar_width, yerr=clipped_errors, color=colors[session], label=session, zorder = 2) # Plot bars with error bars\n\n    ax.set_xticks(x) # Setting x-ticks to the set parameters\n    ax.set_xticklabels(vars, fontsize=9) # Labeling corresponding x-ticks with the variables\n    ax.tick_params(axis = 'y', labelsize=9) # Sets font size for y-ticks \n    ax.set_title(season, loc='left', fontsize=10) # Setting title for each subplot\n    ax.grid(axis='y', linestyle=':', color='gray', alpha=0.7) # Adding grid for y-axis\n    # Remove spines\n    ax.spines['top'].set_visible(False) \n    ax.spines['right'].set_visible(False)\n    # Hide tick marks\n    ax.tick_params(axis='x', which='both', length=0)\n    ax.tick_params(axis='y', which='both', length=0)\n    \n# Add a title and legend\nplt.suptitle(\"Forward's Explosive Movement Metrics are Falling Behind in Practice\", fontsize = 20)\nfig.legend(['Game', 'Practice'], loc='upper center', ncol=2, frameon=False, fontsize=10)\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dataviz</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "Basketball Player Load Data Dictionary",
    "section": "",
    "text": "Variable Definitions\nThis data dictionary reflects variables retained after filtering and cleaning two Catapult datasets from Seasons 1 and 2, excluding player-specific entries and separating game vs. practice data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basketball Player Load Data Dictionary</span>"
    ]
  },
  {
    "objectID": "datadictionary.html#variable-definitions",
    "href": "datadictionary.html#variable-definitions",
    "title": "Basketball Player Load Data Dictionary",
    "section": "",
    "text": "Variable Name\nOperational Definition\n\n\n\n\nDate\nThe calendar date of the session. Converted to a datetime format and sorted per player.\n\n\nSeason\nIndicates which dataset the session came from (either “Season 1” or “Season 2”).\n\n\nAbout\nThe athlete’s full name. Used to track individual session data; one player removed.\n\n\nPosition\nThe athlete’s listed basketball position (e.g., Guard, Forward, Center).\n\n\nPeriod Number\nNumerical label representing a segment of time during a session (e.g., quarter number).\n\n\nPeriod\nText description of a session segment (e.g., “Period 1”, “Skill Work”).\n\n\nTotal Player Load\nOverall workload calculated from accelerometer data; reflects cumulative movement.\n\n\nPlayer Load Per Minute\nAverage physical load per minute played. Normalizes Total Player Load by time.\n\n\nIMA Accel High\nCount of high-intensity accelerations, such as fast breaks or hard cuts.\n\n\nIMA Jump Count High Band\nCount of jumps in the highest effort band (e.g., blocks, dunks, rebounds).\n\n\nSession Total Jumps\nTotal number of jumps captured by the sensor during a session.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basketball Player Load Data Dictionary</span>"
    ]
  },
  {
    "objectID": "datadictionary.html#notes",
    "href": "datadictionary.html#notes",
    "title": "Basketball Player Load Data Dictionary",
    "section": "Notes",
    "text": "Notes\n\nThe dataset was cleaned by removing duplicates, excluding one player (“Ben Vander Plas”), and filtering by Position and Period.\nGame data was identified by rows where the Period string included the word “period” (e.g., “Period 1”, “Period 2”).\nPractice data was identified by exclusion of those Period labels.\n\nSensor data was sourced from Catapult and reflects a mixture of accelerometer and jump-based metrics, used to monitor workload and readiness.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Basketball Player Load Data Dictionary</span>"
    ]
  }
]