[
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "2  Untitled",
    "section": "",
    "text": "# Imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ns1_df = pd.read_csv(\"../project/EDA/Data/catapult_s1.csv\")\ns1_df = pd.DataFrame(s1_df)\n\ns2_df = pd.read_csv(\"../project/EDA/Data/catapult_s2.csv\")\ns2_df = pd.DataFrame(s2_df)\n\nOur first step in preparing our data was reading it in. We read in the two dataframes for the individual seasons(2022-23 and 2023-24).\n\ns1_df['Season'] = 'Season 1'\ns2_df['Season'] = 'Season 2'\ndf = pd.concat([s1_df, s2_df], ignore_index=True)\n\nWe then combined both seasons, centralizing our data into one single dataframe.\n\ndf = df[['Date', 'Season', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']]\n\nOnce we had all of our data read into one dataframe, we filtered it down to include only our variables of interest (as shown above). We wanted to explore exertion in both practice in games, with a focus on positional differences. We felt that PlayerLoad, IMA Accel High, IMA Jump Count High Band, and Session Total Jumps would provide the most insight on this topic. We also kept identifying variables such as date, season, period, etc.\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"viridis\")\nplt.title(\"Missing Data Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\nWe used a heatmap to visualize the number of missing values in our dataframe, which can be seen in yellow. This indicates that our Session Total Jumps variable(referring to the total number of jumps each player has in all periods at each date) is missing a lot of values. We will not use Session Total Jumps in our report as a key variable considering the prevalence of missing values.\n\n# Check data types\nprint(df.dtypes)\n\nDate                         object\nSeason                       object\nAbout                        object\nPosition                     object\nPeriod Number                 int64\nPeriod                       object\nTotal Player Load           float64\nPlayer Load Per Minute      float64\nIMA Accel High                int64\nIMA Jump Count High Band      int64\nSession Total Jumps         float64\ndtype: object\n\n\nWe proceeded to check our data types to see if we would need to convert any variables to a different type(such as an object to an int/float). We concluded that we did not need to do so.\n\n# Convert Date to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\nWe converted our ‘Date’ variable to datetime format for future the exploration of change across time in our report.\n\ndf.shape\n\n(29442, 11)\n\n\nLooking at the shape of our dataframe, we currently have 29,442 observations of 11 variables\n\n# Remove duplicates\ndf = df.drop_duplicates()\n\n\ndf.shape\n\n(29401, 11)\n\n\nAfter dropping our duplicate variables, we are left with 29,401 observations, indicating a low prevalence of duplicates.\n\n# Removing Vander Plas rows\ndf = df[df['About'] != 'Ben Vander Plas']\n\nWe removed all observations where Ben Vander Plas was the athlete. We did this because this data is supposed to be anonymous and we did not want to reveal any personal information about players.\n\n# Splitting up so we can look at positional differences\nforward_df = df[df['Position'] == 'Forward']\nguard_df = df[df['Position'] == 'Guard']\ncenter_df = df[df['Position'] == 'Center']\n\nWe created additional dataframes for each position. We did so because we wanted to analyze differences across position, specifically against forwards. This allowed us to easily access positional differences when looking at statistics and creating visualizations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Untitled</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "# Data preperation lines, not outputted on final report\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ns1_df = pd.read_csv(\"../project/EDA/Data/catapult_s1.csv\")\ns1_df = pd.DataFrame(s1_df)\n\ns2_df = pd.read_csv(\"../project/EDA/Data/catapult_s2.csv\")\ns2_df = pd.DataFrame(s2_df)\n\ns1_df['Season'] = 'Season 1'\ns2_df['Season'] = 'Season 2'\ndf = pd.concat([s1_df, s2_df], ignore_index=True)\n\ndf = df[['Date', 'Season', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']]\n\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf = df.drop_duplicates()\n\ndf = df[df['About'] != 'Ben Vander Plas']\n\nforward_df = df[df['Position'] == 'Forward']\nguard_df = df[df['Position'] == 'Guard']\ncenter_df = df[df['Position'] == 'Center']\n\nmask = df['Period'].str.contains(r'\\bperiod\\b\\s*\\d*', case=False, na=False)\ngames_df = df[mask]\npractice_df = df[~mask]\n\n\nDescriptive Statistics & Distributions\n\n# Pulling out key numeric variables\nvars_list = ['Total Player Load', 'Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band', 'Session Total Jumps']\n\n\nforward_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n10511.000000\n10511.000000\n10511.000000\n10511.000000\n10511.000000\n1155.000000\n\n\nmean\n6.388165\n56.569851\n5.621986\n1.359052\n2.606603\n128.711688\n\n\nstd\n4.006159\n61.007945\n2.510067\n2.473628\n4.734194\n62.874355\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n3.000000\n19.947000\n4.100000\n0.000000\n0.000000\n86.000000\n\n\n50%\n6.000000\n35.826000\n5.300000\n1.000000\n1.000000\n119.000000\n\n\n75%\n9.000000\n65.581500\n6.700000\n2.000000\n3.000000\n164.000000\n\n\nmax\n18.000000\n534.156000\n19.700000\n30.000000\n61.000000\n384.000000\n\n\n\n\n\n\n\n\ncenter_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n3246.000000\n3246.000000\n3246.000000\n3246.000000\n3246.00000\n352.000000\n\n\nmean\n6.298521\n55.603756\n5.692791\n2.018484\n3.03358\n103.482955\n\n\nstd\n3.894753\n56.398404\n2.686004\n3.118062\n6.32298\n47.270691\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.00000\n0.000000\n\n\n25%\n3.000000\n20.394500\n4.000000\n0.000000\n0.00000\n71.000000\n\n\n50%\n6.000000\n37.671000\n5.300000\n1.000000\n1.00000\n96.500000\n\n\n75%\n9.000000\n70.662750\n7.000000\n3.000000\n3.00000\n128.250000\n\n\nmax\n18.000000\n532.129000\n18.700000\n42.000000\n82.00000\n296.000000\n\n\n\n\n\n\n\n\nguard_df.describe(include=[int, float])\n\n\n\n\n\n\n\n\nPeriod Number\nTotal Player Load\nPlayer Load Per Minute\nIMA Accel High\nIMA Jump Count High Band\nSession Total Jumps\n\n\n\n\ncount\n14428.000000\n14428.000000\n14428.000000\n14428.000000\n14428.000000\n1597.000000\n\n\nmean\n6.317854\n56.713305\n5.435438\n1.147283\n2.173759\n121.018785\n\n\nstd\n3.970732\n63.981904\n2.408013\n2.189694\n4.690042\n57.837034\n\n\nmin\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n3.000000\n19.082000\n3.900000\n0.000000\n0.000000\n85.000000\n\n\n50%\n6.000000\n35.199500\n5.200000\n0.000000\n1.000000\n112.000000\n\n\n75%\n9.000000\n65.655500\n6.600000\n1.000000\n2.000000\n150.000000\n\n\nmax\n18.000000\n531.556000\n17.300000\n55.000000\n96.000000\n402.000000\n\n\n\n\n\n\n\nMean total player load is highest for forwards, but they also have more variance. It seems that centers have more high band jumps and high accelerations than forwards, indicating that they may not be exerting much effort. We will proceed by exploring our forwards dataframe.\n\nsns.lineplot(data=forward_df, x='Period Number', y='Player Load Per Minute', hue='About', legend=False, alpha=0.5)\nsns.despine()\nplt.title(\"PlayerLoad by Period\")\nplt.xticks(ticks=[3, 6, 9, 12, 15, 18], labels=['3', '6', '9', '12', '15','18'])\nplt.show()\n\n\n\n\n\n\n\n\nWe can see that PlayerLoad does change by period, peaking with periods around 2. From our dataframe it appears these are the game periods, indicating higher effort exerted during games than practices by forwards. This should be noted as we progress throughout our project.\n\nfig, axes = plt.subplots(len(vars_list), 1, figsize=(4, 2*len(vars_list)))\n\nfor i, column in enumerate(vars_list):\n    sns.kdeplot(forward_df[column], ax=axes[i], color='orange')\n    axes[i].set_title(f'Density Plot of {column}')\n    axes[i].spines['top'].set_visible(False)\n    axes[i].spines['right'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSession total jumps appears to be roughly normally distributed here, as well as player load per minute. Our other variables are skewed to the right, indicating we have high outliers. We can look at boxplots of our skewed variables to explore this further.\n\nsns.boxplot(forward_df['Total Player Load'])\nplt.title('Boxplot of Total Player Load')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(forward_df['IMA Accel High'])\nplt.title('Boxplot of IMA Accel High')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\n\nsns.boxplot(forward_df['IMA Jump Count High Band'])\nplt.title('Boxplot of IMA Jump Count High Band')\nsns.despine()\nplt.show()\n\n\n\n\n\n\n\n\nThere are clearly many high outliers in our data set\n\n#games_df = df[df['Period'].isin(['2. Period 1', '3. Period 2', '1. Warmup'])]\n#practice_df = df[~df['Period'].isin(['2. Period 1', '3. Period 2', '1. Warmup'])]\n\n# need to ask questions about how the data is formatted. we want to split it up into practice and games but there are so many unique \n# identifiers for period that we are unsure how to best go about this.\n\n\n\nExploring relationships between our variables\n\n# Pairplots showing correlation between our key variables\nkey_vars_df = forward_df[vars_list]\nsns.pairplot(key_vars_df, plot_kws={'color': 'orange'})\nplt.show()\n\n\n\n\n\n\n\n\nFrom the pair plots it can be seen that there is a moderate correlation between Total Player Load and IMA Accel High. Other than that there are no relationships that seem to show great correlation between our variables. Collinearity does not appear to be of concern but we can look at a heatmap of our most important variables to explore more precise values.\n\nselected_cols = ['Player Load Per Minute', 'IMA Accel High', 'IMA Jump Count High Band']\nkey_corr = forward_df[selected_cols].corr()\n\nsns.heatmap(key_corr, annot=True, cmap='coolwarm')\nplt.title(\"Correlation Between Acceleration Metrics\")\nplt.xticks([0, 1, 2], ['PL/min', 'Accel High', 'High band Jump'], rotation=0)\nplt.yticks([0, 1, 2], ['PL/min', 'Accel High', 'High band Jump'], rotation=0)\nplt.show()\n\n\n\n\n\n\n\n\nNone of the correlations between our selected variables are very high so we do not need to look into causal relationships.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  }
]